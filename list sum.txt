该类问题为给定列表中两个或者3个数的和为指定值

一、2个数的情况，在列表中找到两个数，其和为指定值

可采用两种方式：
第一种方式使用set，在遍历列表时将指定值与当前值的差值存入set中，遍历时查看当前值是否在set中，如果在set中，则这两个的和为指定值
该方式时间复杂度为O(n)，空间复杂度为O(n)

第二种方式先排序，设置两个指针，begin和end，分别指向列表中第一个和最后一个，一直计算两个指针指向的数据之和，如果小于指定值，则begin前移一位，若大于指定值，则end后移一位，直到两者的和等于指定值
该方式由于需要排序，故时间复杂度为O(nlogn)，空间复杂度为O(1)

二、3个数的情况

1、3个数之和为指定值
先排序，同样设置begin和end指针，分别指向第一个和最后一个，另外增加一个中间指针mid，初始化为begin+1
求出3个数的和，如果和小于指定值，则mid增加1，即前移一位，如果mid已经在end的前一位，则mid无法再增加，此时begin前移一位，mid重设为begin+1
如果和大于指定值，则end前移一位，mid重设为begin+1
该方式时间复杂度为O(n^2)，空间复杂度为O(1)

题目描述:
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

参考代码(python)：
class Solution(object):
    def threeSum(self, nums):
        rsl = []
        if len(nums) < 3:
            return rsl
        nums.sort()
        big = len(nums) - 1
        for small in range(len(nums)):
            if small > 0 and nums[small] == nums[small - 1]:
                continue
            mid = small + 1
            big = len(nums) - 1
            while big >= mid + 1:
                add = nums[big] + nums[small] + nums[mid]
                if add == 0:
                    rsl.append([nums[small], nums[mid], nums[big]])
                    cur = nums[big]
                    while nums[big-1] == cur:  #防止重复，此处可以使用set，将结果作为字符串存入来防止重复
                        big = big - 1
                        if big <= 0:
                            break
                    big = big - 1
                    mid = small + 1
                elif add > 0:
                    big = big - 1
                    mid = small + 1
                else:
                    mid = mid + 1
        return rsl
		
三、3个数之和最接近的问题
与3个数之和类似，只是每次求和时与指定值比较，记录差值，找到差值最小的那个，通过比较和与指定值的大小来移动当前的指针，以加快速度

题目描述：
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers

参考代码(python)：
class Solution(object):
    def threeSumClosest(self, nums, target):
        nums.sort()
        if len(nums) < 3:
            return 0
        min_diff =  abs(nums[-1]) + abs(nums[-2]) + abs(nums[-3]) + abs(target)
        max_add = abs(nums[-1]) + abs(nums[-2]) + abs(nums[-3])
        for begin in range(len(nums)):
            end = len(nums) - 1
            mid = begin + 1
            while end >= mid + 1:
                add = nums[begin] + nums[mid] + nums[end]
                if abs(add - target) < min_diff:
                    min_diff = abs(add - target)
                    max_add = add
                if add > target:
                    end = end - 1
                else:
                    mid = mid + 1
        return max_add

四、4个数之和为指定值

此时需要使用4个指针，begin，end和中间的mid1和mid2，分别初始化为begin+1和end-1，中间指针的移动方向需要规则，可以每次begin和end之间搜索时mid1增加或减少，mid2只减少，否则可能会导致无限循环